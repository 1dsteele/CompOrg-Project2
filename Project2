# Assume your Howard ID as a decimal integer is X. Let N = 26 + (X % 11) where % is the modulo operation, and M = N – 10. 
# You will write a MIPS program that reads a string of up to 1000 characters from user input.
# Remove leading and trailing blank spaces and tab characters. After that
# The program must exit after processing one single user input.
# The conversion from the input string to a decimal number must be done in a subprogram, where the memory address of the input
# string is passed into the subprogram via a register, and the decimal number is returned via a register.
#The number must be printed outside the subprogram.

# Sample test cases (assuming the Howard ID is 02821059): 
# 02821059 % 11 = 10, therefore the base is 26 + 10 = 36, β is 't' and Δ is 'T'. 
# So, N = 36
# M = N - 10 = 36 - 10 = 26
# Input: 0 Output: 1,0.
# Input: A Output: 1,10 
# Input: 012 Output: 3,32
# Input: 100 Output: 3,900
# Input: 1023 Output: 4,27063 
# Input: A12t Output: 4,270989
# Input: 12345 Output: Unrecognized input
# Input: axyz Output: Unrecognized input 
# Input: a  b Output: Unrecognized input
# Input: a@t Output: Unrecognized input 

.data
	error:		.asciiz "Unrecognized input"
	digalpha:	.asciiz "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	userInput: .space 1000
	N:	.word	36	# 26 + (02821059 % 11) = 26 + 10 = 36
	M:	.word	26	# N - 10

.text
      main: 
            li $v0, 8
            la $a0, userInput       #This loads user input into $a0
            li $a1, 1000            #This loads 1000 into $a1
            syscall
            
            la $a0, userInput	    # pass string
            jal trim		    # this subprrogram remove leading and trailing space and tab
            la $a0, userInput	    # pass string
            jal strlen		    # call subprogram to get length of string
            beq $v0, $0, false	    # if zero character then print error message
            li $t0, 4		    # load 4 in t0
            bgt $v0, $t0, false     # if more than four characters then error message
            move $t9, $v0	    # length of string
            lw $t1, M		    # load M
            addi $t1, $t1, -1	    # minus 1 because index start from 0
            addi $t2, $t1, 97	    # load Beta (M-th lower letter)
            addi $t3, $t1, 65	    # load triangle symbol (M-th upper letter)
            
            la $t0, userInput	    # address of userInput
            check_illegalChar:
            lbu $t1, 0($t0)	    # load byte from string
            beq $t1, $0, inputIsValid                # check if string reach to end
            li $t4, 48		    # ascii of '0'
            blt $t1, $t4, false     # if characters less than '0' then illegal
            li $t4, 57		    # ascii of '9'
            bgt $t1, $t4, check_UpperAlpha           # if characters greater than '9' then check 'A' to M-th upper
            b valid
            
            
            check_UpperAlpha:
            li $t4, 65		    # ascii of 'A'
            blt $t1, $t4, false # if characters less than 'A' then illegal
            bgt $t1, $t3, check_lowerAlpha # if characters greater than M-th Upper then check 'a' to M-th lower
            b valid
            
            check_lowerAlpha:
            li $t4, 97		    # ascii of 'a'
            blt $t1, $t4, false     # if characters less than 'a' then illegal
            bgt $t1, $t2, false     # if characters greater than M-th lower then illegal
            valid:
            addi $t0, $t0, 1	    # str index++
            b check_illegalChar
            inputIsValid:
            move $a1, $t9	    # pass length
            la $a0, userInput	    # pass string
            jal convertUnsignedDecimal       # subprogram
            move $t8, $v0	    # move converted number in t8
            li $v0, 1
            move $a0, $t9	    # print number of characters
            syscall
            li $v0, 11
            li $a0, 44		    # print comma
            syscall
            li $v0, 1
            move $a0, $t8	    # print converted number
            syscall
            b exit_program

    false:
        li $v0, 4	            # 4 = code to print string
        la $a0, error               # If errors, print a message not recognized
        syscall
        b exit_program              # Unconditionally branch to exit_program

    exit_program:
        li $v0, 10	            # 10 = code to exit
        syscall
trim:                               # trim
	addi $sp, $sp, -8	    # allocate space on stack to save registers
	sw $ra, 0($sp)
	sw $a0, 4($sp)
	li $s0, 0		    # i = 0
	tr_loop1:
	add $s3, $s0, $a0	    # str[i]
	lbu $s1, 0($s3)	            # load byte from string
	li $s2, 32	            # load ascii of ' '
	beq $s1, $s2, keep_runn	    # check of char is ' ' keep running
	li $s2, 9	            # load ascii of '\t'
	beq $s1, $s2, keep_runn	    # check of char is '\t' keep running
	b stop_tr_loop1	
	keep_runn:
	addi $s0, $s0, 1	    # i++
	b tr_loop1
	stop_tr_loop1:
	beq $s0, $0, tr_out_if      # check if i is 0 then there is no space or tab
	li $s1, 0	            # j = 0
	tr_loop2:
	add $s2, $s1, $a0	    # str[j]
	add $s3, $s1, $s0	    # i + j
	add $s3, $s3, $a0	    # str[i+j]
	lbu $s4, 0($s3)	            # load byte from str[i+j]
	li $s5, 10	            # load ascii of '\n'
	beq $s4, $s5, stop_tr_loop2	    # check of char is '\n' stop loop
	sb $s4, 0($s2)	            # str[j] = str[i+j]
	addi $s1, $s1, 1            # j++
	b tr_loop2
	stop_tr_loop2:
	tr_out_if:
	jal strlen	            # call strlen subprogram
	addi $s0, $v0 -1	    # i = strlen(str) - 1
	lw $a0, 4($sp)	            # load str
	tr_loop3:
	add $s3, $s0, $a0	    # str[i]
	lbu $s1, 0($s3)	            # load byte from string
	li $s2, 32	            # load ascii of ' '
	beq $s1, $s2, keep_runn1    # check of char is ' ' keep running
	li $s2, 9	            # load ascii of '\t'
	beq $s1, $s2, keep_runn1    # check of char is '\t' keep running
	b stop_tr_loop3	
	keep_runn1:
	addi $s0, $s0, -1	    # i--
	b tr_loop3
	stop_tr_loop3:
	addi $s0, $s0, 1	    # i+1
	add $s3, $s0, $a0	    # str[i+1]
	sb $0, 0($s3)		    # str[i+1] = '\0'
	
	lw $ra, 0($sp)
	lw $a0, 4($sp)
	addi $sp, $sp, 8	    # deallocate space from stack
	jr $ra	                    # return back at called address	
strlen:                             # strlen
	li $s0, 0	            # length = 0
	sl_loop:
	lb $s1, 0($a0)	            # load byte from string
	li $s2, 10	            # load ascii of '\n'
	beq $s1, $s2, stop_sl_loop	# check of char is '\n' stop loop
	beq $s1, $0, stop_sl_loop	# check of char is '\0' stop loop
	addi $s0, $s0, 1	    # length++
	addi $a0, $a0, 1	    # string index++
	b sl_loop
	stop_sl_loop:
	add $v0, $0, $s0	    # return length
	jr $ra	                    # return back at called address
	
convertUnsignedDecimal:             # convertUnsignedDecimal
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	lw $s4, N	            # load N base
	li $s0, 0	            # number = 0
	li $s1, 0	            # i = 0
	move $s2, $a0	            # move string in s2
	con_loop:
	beq $s1, $a1, stop_con_loop	# check i < length
	add $s3, $s1, $s2	    # string[i]
	lbu $a0, 0($s3)		    # load byte
	li $s5, 97		    # ascii of 'a'
        blt $a0, $s5, call_subpro   # if characters less than 'a' then call
        li $s5, 122		    # ascii of 'z'
        bgt $t1, $t2, call_subpro   # if characters greater 'z' then call
	addi $a0, $a0, -32	    # convert lower to upper
	call_subpro:
	jal indexOf		    # call subprogram to get index of char
	mul $s0, $s0, $s4	    # number * N
	add $s0, $s0, $v0	    # number * N + letter
	addi $s1, $s1, 1	    # i++
	b con_loop
	stop_con_loop:
	move $v0, $s0		    # return number
	lw $ra, 0($sp)
