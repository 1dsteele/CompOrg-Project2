# Assume your Howard ID as a decimal integer is X. Let N = 26 + (X % 11) where % is the modulo operation, and M = N – 10. 
# You will write a MIPS program that reads a string of up to 1000 characters from user input.
# Remove leading and trailing blank spaces and tab characters. After that
# The program must exit after processing one single user input.
# The conversion from the input string to a decimal number must be done in a subprogram, where the memory address of the input
# string is passed into the subprogram via a register, and the decimal number is returned via a register.
#The number must be printed outside the subprogram.

# Sample test cases (assuming the Howard ID is 02821059): 
# 02821059 % 11 = 10, therefore the base is 26 + 10 = 36, β is 't' and Δ is 'T'. 
# So, N = 36
# M = N - 10 = 36 - 10 = 26
# Input: 0 Output: 1,0.
# Input: A Output: 1,10 
# Input: 012 Output: 3,32
# Input: 100 Output: 3,900
# Input: 1023 Output: 4,27063 
# Input: A12t Output: 4,270989
# Input: 12345 Output: Unrecognized input
# Input: axyz Output: Unrecognized input 
# Input: a  b Output: Unrecognized input
# Input: a@t Output: Unrecognized input 

.data
	error:		.asciiz "Unrecognized input"
	digalpha:	.asciiz "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	userInput: .space 1000
	N:	.word	36	# 26 + (02821059 % 11) = 26 + 10 = 36
	M:	.word	26	# N - 10

.text
      main: 
            li $v0, 8
            la $a0, userInput       #This loads user input into $a0
            li $a1, 1000            #This loads 1000 into $a1
            syscall
            
            la $a0, userInput	    # pass string
            jal trim		    # this subprrogram remove leading and trailing space and tab
            la $a0, userInput	    # pass string
            jal strlen		    # call subprogram to get length of string
            beq $v0, $0, false	    # if zero character then print error message
            li $t0, 4		    # load 4 in t0
            bgt $v0, $t0, false     # if more than four characters then error message
            move $t9, $v0	    # length of string
            lw $t1, M		    # load M
            addi $t1, $t1, -1	    # minus 1 because index start from 0
            addi $t2, $t1, 97	    # load Beta (M-th lower letter)
            addi $t3, $t1, 65	    # load triangle symbol (M-th upper letter)
            
            la $t0, userInput	    # address of userInput
